@page "/actor/throttlerouter"
@using ActorLib.Actors.Test;
@using ActorLib.Actors.Tools;
@using Akka.Actor;
@using Akka.Routing;
@using BlazorActorApp.Components;
@using BlazorActorApp.Data.Actor;

<PageTitle>Throttle</PageTitle>

<MudCard>
    <MudCardContent>
        <MudText>round-robin with Throttle router actor</MudText>
        <MudText Typo="Typo.body2">속도조절이 포함되어 분배처리합니다.</MudText>
    </MudCardContent>
</MudCard>

<MudNumericField @bind-Value="amount" Label="Count" Variant="Variant.Text" Min="1" Max="1000" />

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="IncrementCount">Add WorkActor</MudButton>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SendHello">Send Hello</MudButton>

<div class="diagram-container">    
    <CascadingValue Value="Diagram" IsFixed="true">
        <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
</div>

<MudText Typo="Typo.h5">SampleCode</MudText>
<MudMarkdown Value="@Value" />

@code {

    // https://blazor-diagrams.zhaytam.com/

    private static System.Timers.Timer aTimer;

    private int amount = 10;

    private int currentCount = 0;

    private int currentTPS { get; set; } = 5;

    private BlazorDiagram Diagram { get; set; } = null!;

    private NodeModel RouterNode { get; set; }

    private IActorRef RouterActor { get; set; }

    private IActorRef ThrottleActor { get; set; }

    private IActorRef MonitorActor { get; set; }

    private ActorSystem ActorSystem { get; set; }

    private Dictionary<string, ActorNode> ActorNodes = new Dictionary<string, ActorNode>();

    private ThrottleNode _throttleNode;

    private void StartTimer()
    {
        aTimer = new System.Timers.Timer(1000);
        aTimer.Elapsed += OnTimer;
        aTimer.Enabled = true;
    }

    public void OnTimer(Object source, System.Timers.ElapsedEventArgs e)
    {        
        // TODO : Improve sync method in real time
        InvokeAsync(SyncCount);        
    }

    protected override async Task OnInitializedAsync()
    {
        // Actor
        ActorSystem = AkkaService.GetActorSystem();        
        RouterActor = AkkaService.GetActor("roundrobin");        
        MonitorActor = AkkaService.GetActor("roundrobinMonitor");
        ThrottleActor = AkkaService.GetActor("throttlerouter");

        ThrottleActor.Tell(new SetTarget(RouterActor));

        ThrottleActor.Tell(new ChangeTPS() { processCouuntPerSec = currentTPS });

        // UI
        var options = new BlazorDiagramOptions
            {
                AllowMultiSelection = true,
                Zoom =
            {
                Enabled = false,
            },
                Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new SmoothPathGenerator()
            },
            };

        Diagram = new BlazorDiagram(options);

        Diagram.RegisterComponent<ActorNode, ActorWidget>();

        Diagram.RegisterComponent<ThrottleNode, ThrottleWidget>();

        var firstNode = Diagram.Nodes.Add(new NodeModel(position: new Point(50, 50))
            {
                Title = "Akka System"
            });


        var throttleNode = Diagram.Nodes.Add(new ThrottleNode(position: new Point(50, 200))
            {
                Title = "Throttle",
                ProcessCouuntPerSec = 5
            });

        _throttleNode = throttleNode;

        var secondNode = Diagram.Nodes.Add(new NodeModel(position: new Point(200, 100))
            {
                Title = "RouterActor"
            });        

        var sourceAnchor = new ShapeIntersectionAnchor(firstNode);
        var throttleAnchor = new ShapeIntersectionAnchor(throttleNode);
        var targetAnchor = new ShapeIntersectionAnchor(secondNode);

        Diagram.Links.Add(new LinkModel(sourceAnchor, throttleAnchor));
        Diagram.Links.Add(new LinkModel(throttleAnchor, targetAnchor));

        RouterNode = secondNode;

        await SyncNode();

        StartTimer();

    }

    private async Task SyncNode()
    {
        var result = await MonitorActor.Ask(new ActorCountInfoReq());
        var resultInfo = result as ActorCountInfoRes;

        foreach (var actorInfo in resultInfo.MessageCounts)
        {
            string actorName = actorInfo.Key;
            int messageCount = actorInfo.Value;
            AddNode(true, actorName, messageCount);
        }
    }

    private async Task SyncCount()
    {
        var result = await MonitorActor.Ask(new ActorCountInfoReq());
        var resultInfo = result as ActorCountInfoRes;

        if (currentTPS != _throttleNode.ProcessCouuntPerSec )
        {
            ThrottleActor.Tell(new ChangeTPS() { processCouuntPerSec = _throttleNode.ProcessCouuntPerSec });
            currentTPS = _throttleNode.ProcessCouuntPerSec;
            StateHasChanged();

        }

        foreach (var actorInfo in resultInfo.MessageCounts)
        {
            string actorName = actorInfo.Key;
            int messageCount = actorInfo.Value;

            if (ActorNodes[actorName].MessageCount != messageCount)
            {
                ActorNodes[actorName].MessageCount = messageCount;
                ActorNodes[actorName].RefreshAll();                
            }            
        }
    }

    private void AddNode(bool onlyUI, string nodeName, int messageCount)
    {
        currentCount++;
        string NodeName = nodeName == "auto" ? $"WorkActorA{currentCount}" : nodeName;

        //Create Actor
        if (!onlyUI)
        {
            var workActor = ActorSystem.ActorOf(Props.Create<BasicActor>(), NodeName);
            workActor.Tell(MonitorActor);

            var routee = Routee.FromActorRef(workActor);
            RouterActor.Tell(new AddRoutee(routee));
        }

        //Create UI
        double newX = (currentCount * 250);
        double newY = RouterNode.Position.Y + 150;

        var nextNode = Diagram.Nodes.Add(new ActorNode(position: new Point(newX, newY))
        {
            Title = NodeName,
            MessageCount = messageCount
        });

        ActorNodes[NodeName] = nextNode;

        var sourceAnchor = new ShapeIntersectionAnchor(RouterNode);
        var targetAnchor = new ShapeIntersectionAnchor(nextNode);
        var link = Diagram.Links.Add(new LinkModel(sourceAnchor, targetAnchor));
    }

    private void IncrementCount()
    {
        AddNode(false, "auto", 0);
    }

    private void SendHello()
    {
        if (amount > 0)
        {
            for(int i = 0; i < amount; i++)
            {
                ThrottleActor.Tell(new TodoQueue()
                {
                    Todo = new Todo()
                    {
                        Id = i.ToString(),
                        Title = "Hello"                        
                    }
                });
            }
        }
    }
}

@code
{
    private string Value { get; } =
@"
```
// Create ActorSystem
var actorSystem = akkaService.CreateActorSystem();

// Create RoundRobin Router
var roundrobin = actorSystem.ActorOf(Props.Create<BasicActor>().WithRouter(new RoundRobinPool(0)));

// Create Throttle And connect Router
int tps = 1;
var throttle = actorSystem.ActorOf(Props.Create(() => new ThrottleActor(tps)));
throttle.Tell(new SetTarget(roundrobin));

// Create Worker and Add Routee
var workActor = ActorSystem.ActorOf(Props.Create<BasicActor>(), NodeName);
var routee = Routee.FromActorRef(workActor);
roundrobin.Tell(new AddRoutee(routee));

// Change TPS at Runtime
throttle.Tell(new ChangeTPS() { processCouuntPerSec = 3 });

// Say Hello
throttle.Tell(new TodoQueue()
{
    Todo = new Todo()
    {
        Id = i.ToString(),
        Title = ""Hello""                        
    }
});
```
";
}